
This shell script automates the process of setting up a GitHub team, adding users to the team, assigning repository permissions, 
configuring branch protection rules, and setting the default branch for a repository. The script uses the GitHub CLI (gh) to 
interact with the GitHub API and is designed to be robust, with detailed logging and error handling. Here’s a breakdown of each 
component:


Global Flags
set -e: This flag ensures that the script will immediately exit if any command returns a non-zero exit status. It helps prevent the script from proceeding if an error occurs.


set -x: This flag enables a debug mode, where each command is printed before being executed. It’s useful for debugging and is conditionally enabled by checking if the DEBUG environment variable is set to true.


log Function
This function is used for standardized logging throughout the script. It accepts two parameters:

level: Specifies the type of message (e.g., INFO, ERROR).
message: The log message to display.
The log output includes a timestamp for easier tracking of events in the script execution, which is useful for monitoring and troubleshooting.


Example usage:

bash
Copy code
log "ERROR" "This is an error message."
error_exit Function
This function is responsible for logging an error message and immediately exiting the script with a failure status (exit 1). It is used to gracefully handle errors.

Example usage:

bash
Copy code
error_exit "Failed to perform some critical task."
check_status Function
This function checks the exit status of the previous command (stored in $?). If the exit status indicates an error (non-zero), it calls error_exit with a message, terminating the script.

Example usage:

bash
Copy code
some_command || check_status "Some command failed."
Team-Related Functions
create_team Function
This function creates a new team in a GitHub organization using the gh api command. It sends a POST request to the GitHub API with details such as the team name, description, and privacy settings.

Parameters: It uses the $TEAM_NAME (team name) and $ORG (organization name) environment variables sourced from config.sh.
Error Handling: If the team creation fails, check_status is called to log the failure and exit the script.
Example:

bash
Copy code
gh api -X POST "orgs/$ORG/teams" \
  -F name="$TEAM_NAME" \
  -F description="Team responsible for managing the website repository." \
  -F privacy="closed"
add_user_to_team Function
This function adds a specified user to the newly created team by sending a PUT request to the GitHub API.

Parameters: It uses $USERNAME, $TEAM_NAME, and $ORG sourced from config.sh.
Error Handling: Like create_team, it checks the command’s exit status and logs any errors if the user cannot be added.
set_team_repo_permissions Function
This function sets the repository permissions for the team, giving them "maintain" access to a specified repository.

Parameters: It uses $TEAM_NAME, $REPO, and $ORG environment variables.
Error Handling: If the permission setting fails, check_status ensures the script exits with an appropriate error message.
team_setup Function
This function wraps the team creation, user addition, and permission setting into one function for convenience. It sequentially:

Creates a team.
Adds a user to the team.
Assigns repository permissions to the team.
After completing these tasks, it logs a success message.

Repository-Related Functions
set_branch_protection Function
This function configures branch protection rules for a specific branch of a repository. Branch protection rules help prevent unauthorized changes and enforce review policies.

Branch Protection Settings:
required_status_checks: Ensures all required status checks (e.g., CI checks) are passed before merging.
enforce_admins: Enforces protection rules for administrators.
required_pull_request_reviews: Requires at least one approving review before merging.
restrictions: Limits who can push to the branch (in this case, only users and teams specified).
Other rules: Disallows force pushes and deletions.
The rules are defined in a JSON payload, which is written to a temporary file. The GitHub API request is then made using the --input flag to send this file.

Error Handling: If the API request fails, check_status logs the error and exits the script.
Example payload:

json
Copy code
{
  "required_status_checks": {
    "strict": true,
    "contexts": []
  },
  "enforce_admins": true,
  "required_pull_request_reviews": {
    "required_approving_review_count": 1
  },
  "restrictions": {
    "users": [],
    "teams": ["$TEAM_NAME"],
    "apps": []
  },
  "allow_deletions": false,
  "allow_force_pushes": false
}
set_default_branch Function
This function sets the default branch of the repository (e.g., main or develop) by sending a PATCH request to the GitHub API.

Parameters: It uses $BRANCH and $REPO environment variables.
Error Handling: If the request fails, the error is logged and the script exits.
main Function
This is the main execution function that ties everything together. It:

Sets up the team and repository permissions (team_setup).
Configures branch protection rules (set_branch_protection).
Sets the default branch for the repository (set_default_branch).
Logs a final success message.
Execution
At the end of the script, the main function is called to start the automation process.

bash
Copy code
main



Summary

Team Setup: The script automates the creation of a GitHub team, adds a user to the team, and sets repository permissions.
Branch Protection: It enforces strict branch protection rules, including requiring status checks and reviews before merging.
Default Branch: It sets the default branch of the repository.
Error Handling: Each step is protected by error checks, ensuring that if anything fails, the script stops and provides meaningful error messages.
Logging: The script logs key events and errors, making it easy to trace the execution process.
Debugging: The script can run in debug mode when needed by setting the DEBUG environment variable.